## Install a boot manager
# Overview
	* most systems use BIOS or UEFI
	* BIOS starts with POST (Power On Self Test) and then hands 
	  off to boot process on first sector or MBR (Master Boot 
	  Record) on track (cylinder) 0, side (head) 0 and Sector 1 
	  1 of first disk
	* MBR is only 512 bytes
	* common bootloaders: GRUB, GRUB2, LILO (old and hardly used)
	* UEFI starts with security phase and at end of phase will look 
	  for EFI System Partition (FAT32 partition that could be first 
	  or elsewhere, the implementation defines location) with PE 
	  executables (Windows executable file) and runs them
	* Binary starts the boot loader
		* may be complete boot loader on /boot/efi or small 
		  loader for the main grub on MBR or windows loader or 
		  even chainloader
		* chainloader is when boot loader loads another boot 
		  loader (Linux boot loader starting Windows boot loader 
		  on dual boot system)
# GRUB
	* Grand Unified Bootloader
	* created in 1999 and referred to as GRUB Legacy or GRUB v1 (actually 0.9)
	* menu based system where you choose which kernel or 
	  chainloader to boot
		* also possible to edit the menus on the fly or 
		  give direct commands from a command line
	* usually installed in /boot/grub
	* main config is in /boot/grub/menu.lst OR /boot/grub/grub.conf
		* or some variation of the above
	* the menu list / grub.conf file consists of 2 sections:
		1 global configs
		2 defines different kernel/initram or chainloader options
	* global configs
		* color - foreground/background colors for normal and active items
		* default - number; which is the defautl boot menu item
		* fallback -  path to boot menu item to use if default fails
		* hiddenmenu - boolean; hide menu options
		* splashimage - file path to splash image background you 
		  want to use
		* timeout - number; countdown to start default (or selected) menu option
		* password - --md5 xxxxxxxxxxx (need more info)
		* safedefault - remembers the last boot item
	* kernel/initram or chainloader configs
		* title - informative text; defines the section name
		* root - example (hd0,5); disk/partition where /boot 
		  is located in form of (hddrive, partition) (hd0, 0) 
		  or (hd0, msdos0)
			* can also use /dev/sda or /dev/sdx (point to entire disk and not just partition)
		* kernel - file path to kernel image file name in /boot
		* initrd - file path to initramfs file in /boot
		* rootnoverify - example (hd0,5); defines a non-Linux root partition
		* chainloader - example +1; another file that acts as stage 1 loader 
		  for booting Windows systems
	* GRUB Legacy commands
		* after creating configuration it needs to be installed 
		  on the disk MBR
			* $ grub-install /dev/hd0
			* $ grub-install '(hd0)'
		* GRUB can be installed on CD, floppy, MBR, /dev/sda, 
		  /dev/sda1
		* if GRUB is installed anywhere other than MBR a chainloader 
		  will be needed to point your boot sequence toward it
		* press 'e' during starting to change/reconfigure GRUB
			* press 'enter' when done then 'b' for boot
	* press 'c' on GRUB menu will go into GRUB command line or GRUB 
	  shell
		* use 'root' or 'kernel' or 'initrd'
		* use 'boot' to boot system
		* use esc key to return to menu
# GRUB2
	* most common boot loader currently
	* BIOS systems GRUB2 is installed in
		* /boot/grub
		* /boot/grub2
	* UEFI systems GRUB2 is installed in
		* /boot/efi/EFI/<distro-name>/
	* GRUB2 config file is
		* grub.cfg
	* uses Linux-style numbering for partitions
		* (hd0,1) or (hd0,msdos1) for DOS partitions
		* (hd0,gpt1) for GPT drives
	* GRUB2 configs
		* menuentry - defines new menu entry
		* set root - defines the root where /boot is located
		* linux OR linux16 - defines where Linux kernel is on BIOS systems
		* linuxefi - defines where Linux kernel is on UEFI system
		* initrd - defines the initramfs image for BIOS systems
		* initrdefi - defines the initramfs image for UEFI systems
# GRUB2 Commands
	* to install run the command
		* $ grub-install /dev/<block>
	* in order to make changes to GRUB2, one of the following files
	  need to be updated:
		1 /etc/grub.d/
		2 /etc/default/grub
			* usually /etc/default/grub is updated the most
	* the grub.cfg file is AUTOMATICALLY GENERATED by running the 
	  following command:
		* $ grub2-mkconfig -o /boot/grub2/grub.cfg
			* this command runs grub2-mkconfig and outputs needed 
			  config file
		* for grub legacy: $ grub-mkconfig
	* $ update-grub
		* command used to in place of 
			* $ grub-mkconfig -o /boot/grub/grub.cfg
		* update-grub2 is the exact same as update-grub
			* update-grub2 is a link to update-grub
	* GRUB2 kernel boot parameters
		* console= - set the console
		* debug - starts debug mode
		* init= - run specific program in place default init
		* initrd= - use this initrd
		* ro - mount the root filesystem read only
		* rw - mount the root filesystem for read/write access
		* root= - path to block device that should be used as root
		* selinux - disable selinux on boot
		* single,S,1,Single - boot in single user mode for 
		  troubleshooting (sysv)
		* systemd.unit= - boot in this system target
## Notes:
* GRUB menu shows /dev/sda as (hd0) or similar
	* /dev/sda1 as (hd0,msdos1) or similar
* In order to pick kernel and initrd
	1. on GRUB menu just hit the 'c' key
		* this will bring you to command line
	2. ls
		* this will show your available hard disks like 
		  (hd0,msdos1) (hd1) ...
		* pick the hard disk that you think has kernels.  You 
		  can check by
			$ ls (hd0,msdos1)/boot/ and look for 
			  vmlinuz files and remember the one you want
	3. linux (hd0,msdos1)/boot/<kernel> ro quiet root=/dev/sda1
	4. inird (hd0,msdos1)/boot/<initrdfile>
	5. boot
	* if it does not boot then at the next prompt enter
		$ reboot -f
		* this will take you back to GRUB menu

## From article https://www.linuxfoundation.org/blog/blog/classic-sysadmin-how-to-rescue-a-non-booting-grub-2-on-linux
#(hold down CTRL and click the link to view it online)
	* grub> set pager=1
	* grub> ls
		* to view availble blocks (hard disks)
	* grub> ls (hd0,msdos1)/boot
		* you may have to ls various hard disks until you find the root
		* this example is for BIOS (MBR) systems
		* UEFI systems will have (hd0,gpt1) or similar
		* inside boot folder you should see vmlinuz kernel file(s) 
		  and initrd file(s)
	* at this point please decided on which kernel/initrd file will be loaded
	* grub> set root=(hd0,1)
		* no need to write the msdos or gtp in the partition section of that statement
		* the root needs to be the partition that has the linux kernel
	* grub> linux /boot/vmlinux....... root=/dev/sda1
		* for UEFI systems use linuxefi instead of linux
		* root in this statment needs to be /dev/<rootpartition>
		* possible options to add at end
			* ro - means read only
			* quiet - does not list all comments from running kernel/initrd
	* grub> initrd /boot/initrd........
		* for UEFI systems use initrdefi instead of initrd
		* this initrd file needs to be same version as kernel
			* matching kernels and initrd files are usually in same folder /boot
	* grub> boot
		* this should now boot you into kernel
	* after system loads we will need to update GRUB to work correctly next time
	* $ update-grub
		* run this from terminal on running system
		* this will create new GRUB config file
	* $ grub install /dev/<rootdrive>
		* <rootdrive> for our example would be sda (NOT THE PARTITION!)
	* restart system to confirm that this worked
## GRUB rescue
# this will be used if the prompt shows grub rescue>
	* grub rescue> set prefix=(hd0,1)/boot/grub
	* grub rescue> set root=(hd0,1)
	* grub rescue> insmod normal
		* inserts the normal module
	* grub rescue> normal
	* grub rescue> insmod linux
		* inserts the linux module
	* grub rescue> linux /boot/vmlinuz...... root=/dev/sda1
		* or linuxefi for UEFI systems
	* grub rescue> initrd /boot/initrd......
		* or initrdefi for UEFI systems
	* grub rescue> boot
